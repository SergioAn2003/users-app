// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -destination=../../../mocks/handler.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	entity "users-app/internal/entity"

	uuid "github.com/gofrs/uuid/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserService) CreateUser(ctx context.Context, user entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceMockRecorder) CreateUser(ctx, user any) *MockUserServiceCreateUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserService)(nil).CreateUser), ctx, user)
	return &MockUserServiceCreateUserCall{Call: call}
}

// MockUserServiceCreateUserCall wrap *gomock.Call
type MockUserServiceCreateUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceCreateUserCall) Return(arg0 error) *MockUserServiceCreateUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceCreateUserCall) Do(f func(context.Context, entity.User) error) *MockUserServiceCreateUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceCreateUserCall) DoAndReturn(f func(context.Context, entity.User) error) *MockUserServiceCreateUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteUser mocks base method.
func (m *MockUserService) DeleteUser(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceMockRecorder) DeleteUser(ctx, id any) *MockUserServiceDeleteUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserService)(nil).DeleteUser), ctx, id)
	return &MockUserServiceDeleteUserCall{Call: call}
}

// MockUserServiceDeleteUserCall wrap *gomock.Call
type MockUserServiceDeleteUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceDeleteUserCall) Return(arg0 error) *MockUserServiceDeleteUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceDeleteUserCall) Do(f func(context.Context, uuid.UUID) error) *MockUserServiceDeleteUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceDeleteUserCall) DoAndReturn(f func(context.Context, uuid.UUID) error) *MockUserServiceDeleteUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByID mocks base method.
func (m *MockUserService) GetUserByID(ctx context.Context, id uuid.UUID) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserServiceMockRecorder) GetUserByID(ctx, id any) *MockUserServiceGetUserByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserService)(nil).GetUserByID), ctx, id)
	return &MockUserServiceGetUserByIDCall{Call: call}
}

// MockUserServiceGetUserByIDCall wrap *gomock.Call
type MockUserServiceGetUserByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceGetUserByIDCall) Return(arg0 entity.User, arg1 error) *MockUserServiceGetUserByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceGetUserByIDCall) Do(f func(context.Context, uuid.UUID) (entity.User, error)) *MockUserServiceGetUserByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceGetUserByIDCall) DoAndReturn(f func(context.Context, uuid.UUID) (entity.User, error)) *MockUserServiceGetUserByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUser mocks base method.
func (m *MockUserService) UpdateUser(ctx context.Context, user entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServiceMockRecorder) UpdateUser(ctx, user any) *MockUserServiceUpdateUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserService)(nil).UpdateUser), ctx, user)
	return &MockUserServiceUpdateUserCall{Call: call}
}

// MockUserServiceUpdateUserCall wrap *gomock.Call
type MockUserServiceUpdateUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceUpdateUserCall) Return(arg0 error) *MockUserServiceUpdateUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceUpdateUserCall) Do(f func(context.Context, entity.User) error) *MockUserServiceUpdateUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceUpdateUserCall) DoAndReturn(f func(context.Context, entity.User) error) *MockUserServiceUpdateUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
